//
//  FileGenerator.swift
//  MockingbirdCli
//
//  Created by Andrew Chang on 8/5/19.
//  Copyright Â© 2019 Bird Rides, Inc. All rights reserved.
//

// swiftlint:disable leading_whitespace

import Foundation
import PathKit
import os.log

class FileGenerator {
  let mockableTypes: [MockableType]
  let mockedTypeNames: Set<String>?
  let moduleName: String
  let imports: Set<String>
  let outputPath: Path
  let shouldImportModule: Bool
  let compilationCondition: String?
  let onlyMockProtocols: Bool
  let disableSwiftlint: Bool
  
  init(mockableTypes: [MockableType],
       mockedTypeNames: Set<String>?,
       moduleName: String,
       imports: Set<String>,
       outputPath: Path,
       compilationCondition: String?,
       shouldImportModule: Bool,
       onlyMockProtocols: Bool,
       disableSwiftlint: Bool) {
    self.mockableTypes = onlyMockProtocols ?
      mockableTypes.filter({ $0.kind == .protocol }) : mockableTypes
    self.mockedTypeNames = mockedTypeNames
    self.moduleName = moduleName
    self.imports = imports
    self.outputPath = outputPath
    self.compilationCondition = compilationCondition
    self.shouldImportModule = shouldImportModule
    self.onlyMockProtocols = onlyMockProtocols
    self.disableSwiftlint = disableSwiftlint
  }
  
  var outputFilename: String {
    return outputPath.components.last ?? "MockingbirdMocks.generated.swift"
  }
  
  private func generateFileHeader() -> PartialFileContent {
    let swiftlintDirective = disableSwiftlint ? "\n// swiftlint:disable all\n": ""
    
    let compilationDirective: String
    if let condition = compilationCondition {
      compilationDirective = "\n#if \(condition)\n"
    } else {
      compilationDirective = ""
    }
    
    let moduleImports = (
      imports.union(["import Foundation", "@testable import Mockingbird"]).union(
        shouldImportModule ? ["@testable import \(moduleName)"] : []
      )
    ).sorted()
    
    return PartialFileContent(contents: """
    //
    //  \(outputFilename)
    //  \(moduleName)
    //
    //  Generated by Mockingbird v\(mockingbirdVersion.shortString).
    //  DO NOT EDIT
    //
    \(swiftlintDirective)\(compilationDirective)
    \(moduleImports.joined(separator: "\n"))
    
    """)
  }
  
  private func generateFileBody() -> PartialFileContent {
    guard !mockableTypes.isEmpty else { return PartialFileContent(contents: "") }
    let operations = mockableTypes
      .sorted(by: <)
      .flatMap({ mockableType -> [RenderTemplateOperation] in
        let mockableTypeTemplate = MockableTypeTemplate(mockableType: mockableType,
                                                        mockedTypeNames: mockedTypeNames)
        let initializerTemplate = MockableTypeInitializerTemplate(
          mockableTypeTemplate: mockableTypeTemplate,
          containingTypeNames: []
        )
        
        let generateMockableTypeOperation = RenderTemplateOperation(template: mockableTypeTemplate)
        let generateInitializerOperation = RenderTemplateOperation(template: initializerTemplate)
        
        // The initializer accesses lazy vars from `mockableTypeTemplate` which is not thread-safe.
        generateInitializerOperation.addDependency(generateMockableTypeOperation)
        
        retainForever(generateMockableTypeOperation)
        retainForever(generateInitializerOperation)
        
        return [generateMockableTypeOperation, generateInitializerOperation]
      })
    let queue = OperationQueue.createForActiveProcessors()
    queue.addOperations(operations, waitUntilFinished: true)
    let substructure = [PartialFileContent(contents: genericTypesStaticMocks)]
      + operations.map({ PartialFileContent(contents: $0.result.renderedContents) })
    return PartialFileContent(substructure: substructure, delimiter: "\n\n")
  }
  
  private func generateFileFooter() -> PartialFileContent {
    guard compilationCondition != nil else { return .empty }
    return PartialFileContent(contents: "\n#endif")
  }
  
  func generate() -> PartialFileContent {
    return PartialFileContent(contents: nil,
                              substructure: [generateFileHeader(),
                                             generateFileBody(),
                                             generateFileFooter()].filter({ !$0.isEmpty }),
                              delimiter: "\n",
                              footer: "\n")
  }
  
  private var genericTypesStaticMocks: String {
    return "private var genericTypesStaticMocks = Mockingbird.Synchronized<[String: Mockingbird.StaticMock]>([:])"
  }
}
